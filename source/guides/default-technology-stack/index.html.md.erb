---
title: The DfE Technology Stack
last_reviewed_on: 2022-09-13
review_in: 6 months
weight: 20
old_paths:
- /documentation/guides/default-technology-stack.html
---

# <%= current_page.data.title %>

At DfE, we believe that boring decisions are good decisions.  We therefore provide some default options for technology choices that are well supported within the community and well tested.

These recommendations are purely that: recommendations. They are not standards that you must meet. There are often reasons for deviating from these recommendations, but as a team you should be prepared to justify why you made these decisions, and to trace that back to a user need that drives the decision.

## Application Stacks

The department supports two core tech stacks: .NET and Ruby on Rails. Currently, C#.NET is our preferred tech stack and Ruby is used by exception. Speak to the Head of Software Engineering Profession for guidance on how to choose the right one for your team.

### The Ruby Stack

Ruby and Rails align to government guidance on using open source software. We recommend that teams look at the [boilerplate project](https://github.com/DFE-Digital/govuk-rails-boilerplate) when starting their projects.

### The .NET Core stack

The department has many applications written in C# and the.NET framework and is continuing to develop more. The free and open source [.NET Core](https://en.wikipedia.org/wiki/.NET_Core) aligns with government guidance on using [open source to improve transparency, flexibility and accountability](https://www.gov.uk/guidance/be-open-and-use-open-source).

### The Node.js stack

DfE has some services built in [Node.js](https://nodejs.org/en/), but this is not a core language or framework supported by the department for developing services. Frontend usage may be allowable but should be gauged in the wider context of your service and service area. This should be determined by the team working closely with the software development and technical architecture communities.

Everyone is free to use the [GOV.UK Prototype Kit](https://govuk-prototype-kit.herokuapp.com/docs) for prototyping.

## Hosting Stack
### Azure

DfE uses Microsoft Azure as its primary hosting platform. New services should request an Azure account via the Cloud Infrastructure Platform (CIP) team.

For more information about CIP and the onboarding process of services and users you can contact the team on:

<CloudPlatform.ENGINEERING@education.gov.uk> or [Slack](https://ukgovernmentdfe.slack.com/app_redirect?channel=C7L4D0LM9)

*   [CIP documentation](http://docs.platform.education.gov.uk) (Azure CIP account required)
*   [DfE common components](https://dfe-digital.github.io/architecture/common-components/#cloud-infrastructure-platform)

Community support for Azure use in general can also be gained from the community in the [#cloud-platform Slack channel](https://ukgovernmentdfe.slack.com/app_redirect?channel=C7L4D0LM9).

### GOV.UK Platform as a Service

<%= warning_text(data.site.gov_uk_paas_decommission) %>

We also offer _GOV.UK Platform as a Service_ (GOV.UK PaaS) for applications requiring less customisation than provided by a full
infrastructure-as-a-service platform such as Azure. It is suitable for web services following typical GOV.UK patterns and allows for
rapid deployment without requiring technical expertise.

For more details please refer to the [GOV.UK Platform as a Service](<%= data.site.gov_uk_paas%>)

### Infrastructure as code

DfE uses [Terraform](https://www.terraform.io/) and [Azure Resource Manager (ARM)](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-authoring-templates) templates for automating and scripting Azure infrastructure creation and changes.

Some examples of Azure automation at scale that can be viewed and contributed to are:

*   [Apprenticeships-Service](https://github.com/SkillsFundingAgency/das-platform-building-blocks)
*   [Shared-Infrastructure](https://github.com/SkillsFundingAgency/das-shared-infrastructure)
*   [Signin](https://github.com/DFE-Digital/login.dfe.infrastructure)

### CI/CD pipelines

For build and deployment pipelines, DfE use [Azure DevOps](/infrastructure/automation/azure-devops/) and [Github actions](/infrastructure/automation/github-actions/).

### Containerisation

DfE uses Docker to isolate and package up application dependencies from infrastructure and environment concerns. All repositories should be added to the [dfedigital](https://hub.docker.com/u/dfedigital) Docker Hub organisation (paying) or [Github container registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry) (free for open source).

When integrating Dockerhub in CI/CD it's best to use an appropriately named generic Dockerhub account (e.g. `your-project-name`) set up specifically for your project and documented in your team's runbook / opsmanual. This saves problems caused when users move on from a project.

Ask [Digital tools support](<%= data.site.digital_tools %>) to have members added to the DfE Docker Hub organisation and for help adding credentials to use with your CI/CD pipeline.

## Logging, monitoring and alerting

DfE uses different tools:
- [Azure Application Insights](https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview) for logging and monitoring, with the ability to send custom telemetry.
- [Sentry](https://sentry.io/welcome/) for error reporting
- [Logit](https://logit.io/) for centralised logging, query and visualisation
- [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/) for collecting application metrics and visualisation
- [StatusCake](https://statuscake.com/) for website monitoring from outside

See [Monitoring](/infrastructure/monitoring/).
