---
title: Technical Documentation
last_reviewed_on: 2020-10-15
review_in: 3 months
---

# Technical Documentation

Your team may wish to create a technical documentation micro-site in order to provide a public documentation hub consistent with GOV.UK's design. This can contain any content you desire, but typically would include:

* How to access support
* Architecture documentation 
* Onboarding guides
* COP documentation

There is a [Middleman template](https://github.com/alphagov/tech-docs-template) which enables this. You can find many examples of it's usage [here](https://github.com/alphagov/tech-docs-gem/network/dependents).

This page does not cover general tech site setup; that is covered [here](https://tdt-documentation.london.cloudapps.digital/).

## C4 Diagrams for authoring architecture diagrams from code

The C4 model is one option used within the DfE for visualising architectural design (another is PlantUML). An advantage of the C4 model is that multiple different levels of abstraction ('zoom levels') can be generated from one file.

In summary, the levels are as follows each taking a more concrete and less abstract view of the system as you go down the list:

* Context - consisting of the system landscape and context diagrams, this level focuses on the interactions between high level systems, users, organisations and personas. It is suitable for a non-technical audience.
* Containers - shows the interactions between containers (databases, web apps, file system, etc). Intended for technical people inside and outside of the development team; including software architects, developers and operations/support staff.
* Components - this level of diagram breaks containers into their structural components, e.g. individual data access components and domain services.
* Code - this is generated by existing tooling - typically IDEs - which will output UML class diagrams, entity relationship diagrams or similar.

We have also used the additional Deployment diagram type to illustate the deployment environments.

There is further guidance on the C4 model [here](https://c4model.com/).

## Adding C4 generation to the Tech Docs template

Prerequisites: you have some C4 diagrams to publish, and your tech docs site is using GitHub Actions to publish to GovPaaS. 

The approach followed will be to store the C4 code within the repository. The repository directory will contain the diagrams-as-code file used to define the workspace for [structurizr.com](https://structurizr.com/), a tool we will automate to generate C4 diagrams within the technical documentation site. 

The [structurizr.com](https://structurizr.com/) website provides a SaaS offering to generate diagrams from this code, but there are also plugins available for various IDEs such as VSCode. There is a Free Tier Cloud offering available which allows for one workspace to be created ([feature comparison](https://structurizr.com/products)).

### Generating the diagrams

Once the required secrets are setup within GitHub in order to access the Cloud Account for [structurizr](https://structurizr.com), then the GitHub actions CI/CD pipeline will automatically publish images on PRs to the master/main branch.

1. Sign up for a free Cloud account at [structurizr.com](https://structurizr.com/) (prefereably with a mailbox/service user, not a personal address).
2. Create an empty workspace. This will be used by the build process to automate image export.
3. Aquire the following configuration settings and put them in to your repository's secrets:

| Secret Key                | Secret Value  |
| ------------------------- | ------------- |
| STRUCTURIZR_USERNAME      | Website login username |
| STRUCTURIZR_PASSWORD      | Website login password |
| STRUCTURIZR_WORKSPACE_ID  | Workspace ID to upload the `<repo>/<diagrams-directory>/workspace.dsl` file to as part of build |
| STRUCTURIZR_API_KEY       | API key of workspace |
| STRUCTURIZR_API_SECRET    | API secret of workspace |

After creating the workspace, the workspace ID, API key and API secret settings can be accessed from the 'Settings' page of the workspace.

3. Modify your GitHub Actions file to include the following step before the middleman build is invoked, and after checkout:

```yml
- name: Upload and publish C4 diagrams
  run: | 
    mkdir ./screenshots 
    chmod -R 777 ./screenshots
    docker run --rm -v $(pwd):/usr/local/structurizr structurizr/cli push -id ${{ secrets.STRUCTURIZR_WORKSPACE_ID }} -key ${{ secrets.STRUCTURIZR_API_KEY }} -secret ${{ secrets.STRUCTURIZR_API_SECRET }} -workspace ./source-c4-diagrams/workspace.dsl
    docker run --shm-size 1G --rm -v $(pwd)/source-c4-diagrams/export-private-cloud-diagrams.js:/app/index.js -v $(pwd)/screenshots:/screenshots alekzonder/puppeteer:latest node index.js "https://structurizr.com" "${{ secrets.STRUCTURIZR_USERNAME }}" '${{ secrets.STRUCTURIZR_PASSWORD }}' png ${{ secrets.STRUCTURIZR_WORKSPACE_ID }}
    cp ./screenshots/structurizr-${{ secrets.STRUCTURIZR_WORKSPACE_ID }}-SystemLandscape.png ./source/architecture/context/images/SystemLandscape.png
    cp ./screenshots/structurizr-${{ secrets.STRUCTURIZR_WORKSPACE_ID }}-AcademyTransfersSystem-SystemContext.png ./source/architecture/context/images/SystemContext.png
    cp ./screenshots/structurizr-${{ secrets.STRUCTURIZR_WORKSPACE_ID }}-AcademyTransfersSystem-Container.png ./source/architecture/containers/images/Containers.png
    cp ./screenshots/structurizr-${{ secrets.STRUCTURIZR_WORKSPACE_ID }}-AmazonWebServicesDeployment.png ./source/architecture/deployment/images/Deployment-Live.png
```

This creates a directory for the diagrams to land in (screenshots), then utilizes the structurizr/cli image to upload the `./source-c4-diagrams/workspace.dsl` file in to the previously created workspace with ID `STRUCTURIZR_WORKSPACE_ID`. A puppeteer automation script is then used to automate a headless browser to log in to the cloud service and export the diagrams. Finnaly, the exported files are copied in to their correct positions in the check-out repository file system - ready for middleman.

4. Run a build. Make a note of the generated file names (workspace ID will be redacted with asterix) and make any nessicary amends to the GitHub Actions to copy the files output to the correct place in the repository.