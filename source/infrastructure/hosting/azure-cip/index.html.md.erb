---
title: Azure CIP
last_reviewed_on: 2023-07-14
review_in: 6 months
---

# <%= current_page.data.title %>

<%= partial('partials/page_toc') %>

It provides preconfigured [Azure](https://azure.microsoft.com/) subscriptions including security guardrails.

It provides access to most Azure resources including App Services, Container Instances, Virtual Networks, managed databases, Front Door, Key Vault, storage accounts, etc.

It can be used for any workload, especially ones which donâ€™t fit on [GOV.UK PaaS](<%= data.site.gov_uk_paas%>). It can also be used alongside GOV.UK PaaS to complement it. For example: to store secrets, Terraform state, backups, etc.

Portal: [https://portal.azure.com/](https://portal.azure.com/)

## Platform documentation
* [CIP platform docs](https://docs.platform.education.gov.uk/index.html)

## Onboarding users
Use this [service portal form](https://dfe.service-now.com.mcas.ms/serviceportal/?id=sc_cat_item&sys_id=51b0b9c5db1ff7809402e1aa4b96197d&referrer=recent_items) to create the onboarding request:

1. From _Request type_ dropdown, select: _Azure Portal and DevOps User Account Request_
1. From _Add/Change/Remove_ dropdown, select: _Add_
1. Enter new users' email addresses

If access to the service portal is not possible, ask the helpdesk (See [Support](/infrastructure/support/#helpdesk)) to "Invite --username-- to the CIP AAD. FAO of the Infrastructure Operations Team"

Ask in #cloud-platform on Slack if more help is required.

The new user will receive an invitation by email. Then the service administrators can add them to the service Azure Active Directory groups of the subscriptions: Managers and Delivery team.

To access Azure DevOps, the new user must access the [Azure DevOps CIP instance](https://dev.azure.com/dfe-ssp/). This will register them in the system then the service administrator can add them to the project.

## Privileged Identity Management (PIM) Requests

[Privileged Identity Management (PIM)](https://docs.microsoft.com/en-us/azure/active-directory/privileged-identity-management/pim-configure) is a service in Azure Active Directory (Azure AD) that enables you to manage, control, and monitor access to important resources at DfE such as access to staging and production environments.

To request access to your eligible assignments, follow the steps below:

* Navigate to the [Azure Portal](https://portal.azure.com/) and login using the email you registered with your [CIP account](/infrastructure/hosting/azure-cip/#onboarding-users)

* Click on `Directories + subscriptions`, this is the icon to the left of the notification bell icon in the blue navigation bar

* Ensure you are in the `DfE Platform Identity` directory, if you are not, switch to it. You may be prompted to verify your identity with 2FA

* Search for `PIM` in the search bar at the top of the page and select `Azure AD privileged Identity Management`

* Click on `My roles` on the left hand side of the page, under `Tasks`

* Click on `Azure resources` under `Activate`

* You may have to lengthen the resource section in order to see the full resource name, including the environment

* Click `Activate` under `Action` for the relevant resource

* Select a duration (maximum 8 hours), enter a reason for the request and click `Activate`

* The test subscription, which usually includes the staging and preprod environments is self approving and you should see your request approved shortly

* An email will be sent to the administrators for the production subscription, they will then be able to approve or deny the request. There can sometimes be a delay with this email,
however an administrator can navigate to PIM using the search box (as documented above), then click `Approve requests` and `Azure resources`. The administrator should then see the request


## Onboarding a service
Use this [service portal form](https://dfe.service-now.com.mcas.ms/serviceportal/?id=sc_cat_item&sys_id=51b0b9c5db1ff7809402e1aa4b96197d&referrer=recent_items) to create the onboarding request and choose _Request type: On-Boarding request_. It should be filled in by a senior civil servant (G7 or above). This includes an onboarding form to attach. Finance must be agreed beforehand.

You will be given:

* 2 default subscriptions: dev and test
* 3 Active directory groups: Reader (read only), Delivery team (developers) and Managers (can approve PIM requests). The original requestor will be owner of these groups.
* PIM (Privileged Identity Management) set up: members of the Delivery team can elevate their access themselves in staging, and request approval from a Manager in production.
* A new project in Azure DevOps dfe-ssp organisation and corresponding service connections to the subscriptions

The production subscription can be requested via the same [service portal form](https://dfe.service-now.com.mcas.ms/serviceportal/?id=sc_cat_item&sys_id=51b0b9c5db1ff7809402e1aa4b96197d&referrer=recent_items).
Choose _Request type: Request production subscription_.

## Provisioned Azure DevOps
This is the default platform for automation and continuous integration in DfE: [see](/infrastructure/automation/azure-devops/).

When a service is onboarded to CIP, an Azure DevOps project is automatically provided, including service connection to the CIP subscription.

## Azure Development
Deployments should always be done via infrastructure as code. We recommend using [Terraform](/infrastructure/dev-tools/#terraform) or [ARM templates](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/overview).

## Access from/to Internet
Static public IPs are not permitted by default in CIP. Instead, Azure provides unique domain names but the IP may change.

Should you require a static IP, it is possible to request an [Internet Access Service](https://docs.platform.education.gov.uk/docs/articles/resource-management/platform-firewalls/internet-access-service.html?q=internet). It provides routing from/to the internet via a static IP and a firewall. URLs accessed via the firewall must be whitelisted.

Contact #cloud-platform to set it up.

## Azure service principal
To be able to access Azure from an external system like Github actions, a service account is required. It is called a
service principal in Azure. See the [Azure documentation](https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals).

### Create service principal
In this example we create a service principal which has Contributor (full access) including Keyvault. It depends on the custom role created in [Managing secrets](/infrastructure/security/managing-secrets/#request-roles).

Submit a CIP Request on Service Now using your education.gov.uk identity. The request type is `Any Other Request` and in `Any other request description` enter the following:

```
We have a new service called [service-name] that we are currently setting up for Teacher Services Digital team. This service will need service principals with Contributor access to [subscription-number] subscriptions so that it is in line with our deployment approach for new services.

The Service Principals will all need the Directory.Read.All Microsoft Graph API Application permission, this will need to be approved by a Domain Admin.

The Service Principals will all need the following Azure resource permissions:
Service Principal Name: Azure Resource Permissions
[dev-subscription-prefix]-[service-abbreviation]-contributor: Contributor, Key Vault Reader and Key Vault Secrets Officer roles on subscription [dev-subscription-name]
[test-subscription-prefix]-[service-abbreviation]-contributor: Contributor, Key Vault Reader and Key Vault Secrets Officer roles on subscription [test-subscription-name]
[prod-subscription-prefix]-[service-abbreviation]-contributor: Contributor, Key Vault Reader and Key Vault Secrets Officer roles on subscription [prod-subscription-name]

They will be used to deploy Azure resources from GitHub repository DFE-Digital/[repo-name] owned by DFE-Digital.

Please can you also add the following users as Owners on the Service Principals: [digital-accounts-for-infra-team-members]
```

Substitute anything in square brackets with values relevant to your request.

- [Create access keys](https://docs.microsoft.com/en-us/azure/storage/common/storage-auth-aad-app?tabs=dotnet#create-a-client-secret) with
**1 year expiration**. This is mandated by CIP.
- **_This is the only time you will see the key_**, so take this opportunity to COPY and PASTE it into the Key Vault now, in a secret named `SP-Readonly-Credentials` for instance

### Add permissions
Add the service principal to groups or access policies to give it access to particular resources.

To assign it a role, request [CIP](/infrastructure/support/#infrastructure-operations) to add them. You may need approval from Security, ie the allocated ISO.

### Use the service principal in external systems

You can use the [new_aad_app_secret](https://github.com/DFE-Digital/bat-infrastructure/blob/main/scripts/new_aad_app_secret.sh) script to generate the formatted json with the required information as per the example below.

```json
{
    "clientId": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
    "clientSecret": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
    "subscriptionId": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
    "tenantId": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
}
```

Before running the script:

- Ensure you are logged in to the tenant containing the app registration and have selected the subscription which contains the resources that the app registration needs access to
- Ensure you a member of the apps 'Owners'
- Obtain the `Application (client) ID` of the app registration you want to add to the GitHub secret
- A display name to help you identify this secret in the app registrations `Certificates & secrets` blade in the Azure Portal

Run the script with `./new_aad_app_secret.sh <CLIENT_ID> "<DISPLAY_NAME>"`. Where the `CLIENT_ID` is the Application (client) ID from the app registration overview screen and `DISPLAY_NAME` could be "KV access" - it is the credential display name ([docs](https://learn.microsoft.com/en-us/cli/azure/ad/app/credential?view=azure-cli-latest#az-ad-app-credential-reset)). It should then output the required information as formatted JSON. This can be pasted in as the value for the GitHub secret.

The information it contains can also be manually obtained:

- `clientId`: From App registration overview that we are creating the secret for, use the `Application (client) ID`
- `clientSecret`: Access key generated above, retrieve it from the key vault secret (e.g. SPReadonlyCredentials) or update it if renewing the secret
- `subscriptionId`: Get the subscription id at the subscription level
- `tenantId`: From App registration overview, use `Directory (tenant) ID`

#### GitHub Actions

The GitHub secret (eg: `AZURE_CREDENTIALS`) can be used with the Azure login action or by providing it to Terraform ([Additional information](https://github.com/marketplace/actions/azure-login#configure-a-service-principal-with-a-secret)).

```yaml
- uses: Azure/login@v1
  with:
    creds: ${{ secrets.AZURE_CREDENTIALS }}
```

When using multiple deployment environments, each one may require its own set of credentials from different service principals. Configure `AZURE_CREDENTIALS`
as [environment secret](https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-an-environment) for each
Github environment and make sure the [job is configured with the corresponding environment](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idenvironment).

#### Terraform
Use the [service principal](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret) credentials above
to configure the [provider](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs#argument-reference).

The above json may be reused by passing it to a terraform variable then the [jsondecode](https://www.terraform.io/docs/language/functions/jsondecode.html) function can be used to extract the values.

### Access key expiration
The Operations team will alert you to the prospect of these secrets expiring, but will not update the credentials. If GitHub actions are used for example and the GitHub secret is not updated, then there is a risk of the CI/CD pipelines failing.

See above to recreate the access keys and make sure to update them in key vault and in the systems using them.

For more control there is a [github_action](https://dfe-digital.github.io/github-actions/CheckServicePrincipal/) developed to enable periodic checks.

For the GitHub action to work, the API Permission **Microsoft Graph Directory.Read.All** needs to be granted in App Registrations. Request the [CIP team](/infrastructure/support/#cip-engineering) to add the permissions.
