---
title: Tooling
weight: 20
last_reviewed_on: 2022-09-5
review_in: 12 months
---

# <%= current_page.data.title %>

<%= warning_text(data.site.gov_uk_paas_decommission) %>

<%= partial('partials/page_toc') %>

## cf cli

The default tool to deploy to GOV.UK PaaS is the [cf command line tool](https://docs.cloud.service.gov.uk/get_started.html#set-up-the-cloud-foundry-command-line).
It is easy to use and any developer can use it to push applications and create services like PostgreSQL or Redis.

When deploying with the cli, we recommend using [manifests](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html):

* It avoids passing multiple options on the command line
* Manifests can be stored in the git repository
* Secrets or variables can be passed at deploy time

## Terraform
The Cloud Foundry provider for [Terraform](/infrastructure/dev-tools/#terraform) allows describing the deployment in a declarative way. It is the recommended way for robust deployments and
continuous delivery pipelines.

### Why

* The declarative syntax avoids having to think about dependencies. Terraform will create the resources in the right order and destroy them in the
right order when required. It also makes it idempotent so Terraform won’t recreate a resource already created.
* This is particularly useful to create disposable environments for testing or review apps, and delete them when they are not required anymore.
* The syntax is elegant, powerful and modular.
* It can read data from environment variables, AWS Parameter Store, Azure Key Vault, YAML files, JSON files, etc.
* It can create an environment made of very different technologies. For example, we create an environment with Azure, GOV.UK PaaS and Statuscake in a single Terraform run.

### Cloud Foundry provider
The Cloud Foundry community maintains the [Cloud Foundry Terraform provider](https://registry.terraform.io/providers/cloudfoundry-community/cloudfoundry/latest/docs).

It can be easily downloaded and installed on Terraform 0.13 and above with:

```hcl
terraform {
  required_providers {
    cloudfoundry = {
      source = "cloudfoundry-community/cloudfoundry"
      version = "~> 0.15"
    }
  }
}
```

### Zero downtime

By default when an application is pushed to GOV.UK PaaS, the live version is deleted, the new version is built, then the new version becomes live.
This can create a few minutes downtime.

To avoid this issue, the provider offers an elegant [blue-green](https://registry.terraform.io/providers/cloudfoundry-community/cloudfoundry/latest/docs/resources/app#application-deployment-strategy-blue-green-deploy)
deployment strategy. It builds the new version alongside the live one, and it switches traffic to it smoothly when it’s up and running.

### Caution

* Terraform requires its state to be stored in persistent storage. An PaaS solution may be used alongside GOV.UK PaaS, like an Azure Storage account with
blob versioning enabled. GOV.UK PaaS also provides an [Amazon S3 service](https://docs.cloud.service.gov.uk/deploying_services/s3/) but it currently doesn't
offer versioning (it's on the [roadmap](https://github.com/alphagov/paas-roadmap/issues/64) though).
* All the resources are under Terraform control, including databases. It is a good practice to back up critical databases externally as an additional
protection. Terraform [prevent_destroy lifecycle](https://www.terraform.io/docs/language/meta-arguments/lifecycle.html#prevent_destroy) may help as well.
* The provider has a few bugs. Here are suggested workarounds:
  * Docker image not updated: use [blue-green deployment](https://registry.terraform.io/providers/cloudfoundry-community/cloudfoundry/latest/docs/resources/app#blue-green)
  * [Database connection issues during blue-green deployment](https://github.com/cloudfoundry-community/terraform-provider-cloudfoundry/issues/353):
      * use [service key](https://registry.terraform.io/providers/cloudfoundry-community/cloudfoundry/latest/docs/resources/service_key) instead of [service binding](https://registry.terraform.io/providers/cloudfoundry-community/cloudfoundry/latest/docs/resources/app#service_binding)
      * use version 0.15.4+ of the Cloud Foundry Terraform Provider

## Docker

The default option to deploy an application to GOV.UK PaaS is using buildpacks. They are preconfigured environments for a variety of programming
languages. The developer pushes their code using `cf push` and Cloud Foundry will build it remotely using the relevant buildpack. This is **not** the
DfE recommended way to deploy to GOV.UK PaaS, except for very simple applications like static websites.

Another solution is to use Docker. Using `cf push --docker-image my-app` tells Cloud Foundry to:

* Pull the my-app image from a Docker Registry (Docker Hub by default)
* Unpack the files
* Run the application in Cloud Foundry container environment

This approach has several advantages:

* Avoid vendor lock-in: Docker is commonly used in other platforms like Kubernetes, Azure App Service, Azure Container Instances, AWS ECS, etc. Should
we want to move away from GOV.UK PaaS, it’s possible.
* Build only once: The Docker image is a build artifact identified by a specific tag (usually the commit id). It can be deployed consistently across
different environments and it removes the dependency on artifacts downloaded at build time from external systems.
* Faster deployments: The deployment to each environment only takes a few seconds as the image is already built.
* Faster build: Docker build cache can be leveraged to reduce build time massively.

The Terraform Cloud Foundry provider also supports Docker.

**Important:** If you use Docker Hub as your Docker registry, make sure to set up authentication as unauthenticated pulls are significantly
[rate limited](https://docs.docker.com/docker-hub/download-rate-limit/).

## Monitoring apps and services
The admin portal provides the status of applications and service. It also shows metric graphs for services.

Deploy [cf-monitoring](https://github.com/DFE-Digital/cf-monitoring/) to provide detailed metrics, alerting and dashboards for your applications and services.
This includes a billing dashboard showing daily usage so you can finely control the costs.

## Centralised logging
Recent application logs are available via the `cf` command line. For permanent storage, filtering, advanced queries, log based dashboards and alerting,
we recommend using [Logit.io](https://logit.io/) which is a cost effective SaaS ELK platform widely used in Government.
See the [GOV.UK PaaS documentation](https://docs.cloud.service.gov.uk/monitoring_apps.html#set-up-the-logit-log-management-service).
