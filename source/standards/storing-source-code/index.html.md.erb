---
title: Storing source code
old_paths:
- /documentation/standards/storing-source-code.html
---

# <%= current_page.data.title %>



## GOV.UK Service Manual

We follow principles set out within the [GOV.UK Service Manual](https://www.gov.uk/service-manual)
for managing code we write.

### Service Manual Sections of relevance:

- [Service Manual > Technology > Use version control](https://www.gov.uk/service-manual/technology/maintaining-version-control-in-coding)
- [Service Manual > Technology > Make source code open](https://www.gov.uk/service-manual/technology/making-source-code-open-and-reusable)
- [Service Manual > Technology > Securing your information](https://www.gov.uk/service-manual/technology/securing-your-information)

### Summary / Highlights:

- Changes to source code _must_ be tracked
- Code we produce _should_ be made available via an internet source code repository
- Published code _should_ be under an Open Source initiative compatible licence
- Due-care _must_ be given to security considerations, including:
  - Suitable protection of confidential information and secrets
  - Departmental/governmental rules related to the use of cloud/3rd-party tooling
  - Proper process and accountability/approvals for making code changes

Additional detail and information is available via the links above.


## Types of source code

Source code is broader and wider than just business and presentation code.

How source code is stored and structured will vary by project:

- A project may be composed of multiple services where each has its own repository
- A monolith may have all source code for all purposes stored within the same source code repository
- A mixture may apply where project source code and tests are within one repository,
  while infrastructure code may be stored within a separate repository

Examples of source code types and purposes:

- **Project source code**
  - Code used to meet a user need - i.e., what is normally considered when describing "source code"
- **Test code**
  - Code used to evaluate the correctness of the project code
  - Depending on the project, test code may involve provisioning infrastructure, deploying a build,
    and even running the project code
    _(e.g. a headless browser to test the presentation and accessibility of a web page)_
- **Infrastructure as code**
  - Code used to provision and configure the infrastructure a project runs upon
- **CI configuration**
  - Code used to inspect, validate, and potentially gate-keep changes being made to project code
  - May include GitHub Actions and Azure Pipelines
  - Typically triggered on a merge/PR event, but other examples include being triggered on
    creation of a particular tag (e.g., one in the format `vX.Y.Z`) or on a timer/cron-basis
- **Deployment code**
  - Code used to build, test, and deploy project source code into a running environment

## Source Code Versioning: Git

At the Department for Education (DfE) we use [Git](https://git-scm.com/) for source code versioning.

- Git is decentralised - this means all copies of the repository include the WHOLE history of the repository,
  not just a snapshot
- Branches are "cheap" - creating a new branch (or tag) involves just a new pointer at a specific commit
  (thus minimal compute and storage implications)
- Hashes/checkums for each file and commit depend on the entire tree - thus, the repository is safe from
  surreptitious / malicious / accidental changes to earlier versions of a file without it being
  very visible to other users



## Git Repository Hosting - GitHub and Azure DevOps (ADO)

While not required, most git users will nominate one copy of the git repository to be the authoritative copy.

- It is possible to self-host a git server for this purpose but, often, this will be a hosted solution such as
  GitHub, Azure DevOps, GitLab, or any of the numerous other commercial services available.
- A "hub and spoke" is easier to reason about and keep synchronised
- Integrations with other tools will work with less friction, where they have a single copy to work with
  (e.g., automated test/deployment tools, issue/bug management)


### GitHub

Historically, some projects use (and may remain on) private Azure DevOps and/or private GitHub repositories
for legacy reasons, though we are now required to [make new source code open](https://apply-the-service-standard.education.gov.uk/service-standard/12-make-new-source-code-open.html).

Specifically, we use GitHub for new and migrated work.


### GitHub Organisations

Department for Education (DfE) source code repositories on GitHub should be stored under an appropriate
organisation, thereby giving appropriate oversight and protections to these source code repositories.

Specifically:

- The [Department for Education Digital](https://github.com/DfE-Digital)
  GitHub organisation is used for new and existing source code repositories
  - This is applicable to production and prototype code
- Work created outside the DfE Digital organisation should be transferred into
  the DfE Digital organisation at the earliest opportunity.
  - [GitHub: Guide to transferring a repository](https://help.github.com/en/articles/transferring-a-repository)
- The [Skills Funding Agency](https://github.com/SkillsFundingAgency/)
  GitHub organisation is also used by the DfE
  - Not the default for DfE-Digital

There is a small cost for accounts to be added to a GitHub organisation.
Ask your delivery manager to request your account being added to these GitHub organisations.


### Work vs Personal GitHub accounts

You may use your personal GitHub account, but you should:

- [GitHub: Add your DfE email address to your account](https://help.github.com/articles/adding-an-email-address-to-your-github-account/)
- [GitHub: Use your secondary (DfE) email address for notifications](https://help.github.com/articles/managing-notification-emails-for-organizations/)


### Repository Requirements

Repositories should be:
- [clearly named](/standards/naming-things/),
- have an [appropriate licence](/standards/licencing-software-or-code)
- have enough documentation that someone new can get started with the project


## Data Protection Considerations - Git Repositories

### Personal Data

Storage of a git repository must be treated with due care and consideration.
This applies whether it is within a central hosted environment or stored
elsewhere such on a developer's computer.

- Changes to source code, commits, are annotated with authorship details.
  Typically, this is a name and an email address.
- Where the commit is cryptographically-signed, the GPG key used will also have
  personal information associated with it such as an email address.

Additionally, note that git is _explicitly_ a _decentralised_ source versioning and control system.

- It is, therefore, not possible to delete/change information within one copy of the
  repository (e.g., GitHub) and force all other copies to be updated also
- It is, therefore, extremely important to prevent non-public content from ever
  being added to the git repository in the first place because it cannot be removed


### Secrets

You _must_ keep secrets separate from source code, and keep them private.

Private repositories are a poor way to protect secrets, and may only be used
where access to the code might reveal draft policy decisions.

Secrets should be managed at the platform level.
